{"version":"1","records":[{"hierarchy":{"lvl1":"Radiative Feedback Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook"},"content":"\n\n\n\n\n\n\n\n\n\nThis Project Pythia Cookbook explores the fundamental science and practice of radiative feedback analysis applied to climate model output.","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":2},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl2":"Motivation"},"content":"There are several well-established methods for quantifying radiative feedbacks from climate model output, and these have been widely used in the scientific literature. However, a comprehensive set of tutorials representing best practices for implementing these methods has been lacking, forcing new practioners to “reinvent the wheel” and piece together the implementation details from sometimes incomplete descriptions in the primary literature.\n\nThis Cookbook aims to fill this gap by collecting a verbose set of tutorials that take the reader through some of the basic theory and implementation details, with plentiful example code that can be easily adapted to new datasets and new research applications. The examples will skew heavily toward the method of radiative kernels, with some comparison to other methods.","type":"content","url":"/#motivation","position":3},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":4},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl2":"Authors"},"content":"Brian Rose, \n\nRachel Tam, \n\nTy Janoski, \n\nRobert Ford, \n\nHannah Zafar, and \n\nAna Castaneda Montoya","type":"content","url":"/#authors","position":5},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":6},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":7},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":8},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl2":"Structure"},"content":"This Cookbook is organized as follows:","type":"content","url":"/#structure","position":9},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Foundations","lvl2":"Structure"},"type":"lvl3","url":"/#foundations","position":10},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Foundations","lvl2":"Structure"},"content":"This section takes the reader through some of the basic ideas and provides an overview of the mathematical theory underlying the radiative kernel method.","type":"content","url":"/#foundations","position":11},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Feedback Analysis","lvl2":"Structure"},"type":"lvl3","url":"/#feedback-analysis","position":12},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Feedback Analysis","lvl2":"Structure"},"content":"This section links the theory to the practice by demonstrating the detailed implementation of some radiative feedback calculations.","type":"content","url":"/#feedback-analysis","position":13},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Simplifying Calculations","lvl2":"Structure"},"type":"lvl3","url":"/#simplifying-calculations","position":14},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Simplifying Calculations","lvl2":"Structure"},"content":"This section gives more practical example code for carrying out feedback calculations on CMIP6 data, making use of some specialized software packages.","type":"content","url":"/#simplifying-calculations","position":15},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":16},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":17},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":18},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.","type":"content","url":"/#running-on-binder","position":19},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":20},{"hierarchy":{"lvl1":"Radiative Feedback Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\nClone the https://github.com/ProjectPythia/radiative-feedback-cookbook repository: git clone https://github.com/ProjectPythia/radiative-feedback-cookbook.git\n\nMove into the radiative-feedback-cookbook directorycd radiative-feedback-cookbook\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate feedback-cookbook-dev\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":21},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks"},"type":"lvl1","url":"/notebooks/foundations/energy-balance-model","position":0},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks"},"content":"\n\n\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model","position":1},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Overview"},"type":"lvl2","url":"/notebooks/foundations/energy-balance-model#overview","position":2},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Overview"},"content":"This tutorial focuses on introducing the fundamental concepts of the energy balance model and radiative feedback, and establish notations and definitions for the rest of the cookbook.\n\nThe following topics will be covered in this tutorial:\n\nThe Energy Balance Model\n\nWhat is Radative Feedback\n\nMethods to Calculate Radiative Feedback\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#overview","position":3},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/foundations/energy-balance-model#prerequisites","position":4},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nTBD\n\nNecessary\n\n\n\nTime to learn: >30 minutes\n\n\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#prerequisites","position":5},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Radiative Budget Analysis"},"type":"lvl2","url":"/notebooks/foundations/energy-balance-model#radiative-budget-analysis","position":6},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Radiative Budget Analysis"},"content":"\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#radiative-budget-analysis","position":7},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"The Energy Balance Model"},"type":"lvl2","url":"/notebooks/foundations/energy-balance-model#the-energy-balance-model","position":8},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"The Energy Balance Model"},"content":"\n\nNote\n\nFor a more comprehensive material about the energy balance model, pokearounds on the energy balance model, and introductions to simpler energy balance models like the two-box model, feel free to check out other resources like the \n\nClimate Laboratory and Chapter 2 - Global Energy Balance of the book by \n\nHartmann (2016).\n\nImagine a scenario where we start off with an energy-balanced Earth, where at top of atmosphere (TOA) flux towards Earth’s surface is equal to the TOA flux going out to space.\n\nNow if we double the concentration levels of carbon dioxide (CO_2) in the atmopshere - the surface temperature is going to increase through the greenhouse-effect instantaneously. However, climate processes can amplify or dampen the climate response. For example, the surface may radiate more out to space due to the surface warming, which would dampen the overall warming. On the other hand, there may be more water vapor to absorb the outgoing longwave radiation in the atmosphere due to the increased rate of evaporation from the warming, and thus amplifies the warming.\n\nTo put this into equations, let R be the radiative imbalance, S_0 as the solar insolation, \\alpha as the planetary albedo, and together, S_0/4 (1-\\alpha) represents the absorbed solar radiation. OLR is the outgoing longwave radiation. At equilibrium where the incoming flux equals to the outgoing flux, R = 0.R = F_{in} - F_{out}R = S_0/4 (1-\\alpha) - OLR\n\nIn this case, the addition of CO_{2} induces a change in the radiative flux at the top of the atmosphere, and is quantified as the raditive forcing F. The climate responds to the radiative imbalance by changing the global mean temperature. We can relate the global mean surface temperature to the external perturbation and the radiative imbalance at TOA by the following equation:R = F + \\lambda T\n\nwhere R is the net TOA flux anomaly (positive downward), F is the effective radiative forcing, \\lambda is the feedback parameter, also known as the climate response parameter, and T is the global mean surface temperature anomaly, relative to the temperature at equilibrium.\n\nOther typical conventions of the same values used within the community:\n\nR = N (e.g., \n\nGregory et al. (2004));\n\nR = H (e.g., \n\nDessler & Zelinka (2015));\n\nF = \\Delta Q  (e.g., \n\nBony et al. (2006));\n\n\\lambda = \\alpha (e.g., \n\nGregory et al. (2004));\n\nNote\n\nAs you explore the feedback-forcing space, you may stumble upon the term climate sensitivity, which is the relationship between the magnitude of the climate change response and the doubling-CO_2 forcing with the unit in Kelvin.ECS = \\frac{1}{\\lambda}\n\nThis metric tells how much the climate system would warm per unit of radiative forcing (typically doubling of CO_{2}). Ch.10 Climate Sensitivity and Feedback Mechanisms of the book by \n\nHartmann (2016) and the chapter Climate Feedbacks in the Encyclopedia of Atmospheric Sciences \n\nDessler & Zelinka, 2015 provide a holistic overview on the topic, and \n\nSherwood et al. (2020) would provide the most up-to-date understanding on equilibrium climate sensitivity (ECS) within the community.\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#the-energy-balance-model","position":9},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Radiative Feedback (\\lambda)"},"type":"lvl2","url":"/notebooks/foundations/energy-balance-model#radiative-feedback-lambda","position":10},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Radiative Feedback (\\lambda)"},"content":"","type":"content","url":"/notebooks/foundations/energy-balance-model#radiative-feedback-lambda","position":11},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"So, what is a feedback and why does it matter?","lvl2":"Radiative Feedback (\\lambda)"},"type":"lvl3","url":"/notebooks/foundations/energy-balance-model#so-what-is-a-feedback-and-why-does-it-matter","position":12},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"So, what is a feedback and why does it matter?","lvl2":"Radiative Feedback (\\lambda)"},"content":"Feedback is the climate system response to an external radiative forcing \n\nHansen et al., 1984, \n\nBony et al., 2006. When the global mean surface temperature changes, climate variables may change as well. These climate variable changes would influence the Earth’s radiation balance and contribute to the radiative response.\n\nNote that feedback is different from the radiative response, where the former has the unit of W m^{-2} K^{-1} and is quantified by the feedback parameter \\lambda, while the latter  has the unit of W m^{-2}, quantified by \\lambda T.\n\nLet x be a vector representing an ensemble of climate variables like atmospheric temperature, water vapor, surface ice and snow. The formal definition of the system’s total feedback parameter, which is the strength of the climate system’s net feedback, is as follow \n\n:\\lambda = \\frac{\\partial R}{\\partial T_{s}} = \\sum^{x} \\frac{\\partial R}{\\partial x} \\frac{\\partial x}{\\partial T_{s}} + \\sum \\sum \\frac{\\partial ^{2}R}{\\partial x \\partial y} \\frac{\\partial x \\partial y}{\\partial T_{s}^{2}} + ...\n\n(UNDER CONSTRUCTION: source needed for why do this+populate explanation on equation - Dessler and Zelinka 2015 explains it more intuitively, but require conversion from g to \\lambda)\n\nThe net feedback parameter is reduced to the first order \n\nSherwood et al., 2020:\\lambda = \\sum^{x}_{i}\\lambda_{i} = \\sum^{x} \\frac{\\partial R}{\\partial x} \\frac{\\partial x}{\\partial T_{s}}\n\nA positive feedback (\\lambda > 0) would make the forced response bigger while a negative feedback (\\lambda < 0) stabilizes the forced response. In the following subsections, we will discuss each feedback mechanism in detail and how the mechanism would feed back into enhancing or muting the response.\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#so-what-is-a-feedback-and-why-does-it-matter","position":13},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"Types of Feedbacks","lvl2":"Radiative Feedback (\\lambda)"},"type":"lvl3","url":"/notebooks/foundations/energy-balance-model#types-of-feedbacks","position":14},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"Types of Feedbacks","lvl2":"Radiative Feedback (\\lambda)"},"content":"Feedbacks below are listed following \n\nSherwood et al., 2020 and are limited to feedbacks that directly affect the top-of-the-atmosphere (TOA) radiation budget, and respond to surface temperature mostly through physical processes \n\nBony et al., 2006:\n\nPlanck Feedback\n\nSurface Albedo Feedback\n\nWater Vapor Feedback\n\nLapse Rate Feedback\n\nCloud Feedback\n\nThe list above is not exhaustive. Feedbacks like the carbon cycle feedback are not included due to the carbon dioxide level being prescribed for the experimental set-up in \n\nSherwood et al. (2020). Other feedbacks like the atmospheric ozone feedback and stratospheric feedback are not included as they are not normally quantified \n\nSherwood et al., 2020.\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#types-of-feedbacks","position":15},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"1. Planck “Feedback” (Negative under warming)","lvl2":"Radiative Feedback (\\lambda)"},"type":"lvl3","url":"/notebooks/foundations/energy-balance-model#id-1-planck-feedback-negative-under-warming","position":16},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"1. Planck “Feedback” (Negative under warming)","lvl2":"Radiative Feedback (\\lambda)"},"content":"Planck feedback is the extra longwave (LW) emission to space from a vertically uniform warming of the surface and atmosphere, while holding all climate variable unchanged.\n\nThe Planck feedback can be explained by the Stefan-Boltzmann law, which states that the total energy radiated per unit surface area per unit time is directly proportional to the fourth power of the black body’s temperature.F = \\sigma T^4\n\nwhere \\sigma is the Stefan-Boltzmann constant (5.67 \\times 10^{-8} W m^{-2} K^{-4}). If everything else is held constant, we can calculate the rate of change of TOA flux due to the change in surface warming by taking the derivative of the Stefan-Boltzmann law. Taking the Earth’s average outgoing longwave radiation as 240 W m^{−2} (e.g., \n\nLoeb et al. (2018)) for the global effective emission temperature T_{e} as 255 K, and substitute it as follow:-4\\sigma T_e^3 \\approx - 3.76~\\text{W}~\\text{m}^{-2}~\\text{K}^{-1}\n\nIf we include the planetary emissivity \\epsilon, we will get \\lambda_{Planck} \\approx -3.3 W m^{-2} K^{-1}, which is close to observations \n\nDessler, 2013 and global climate models \n\nCaldwell et al., 2016).\n\nSimply put, the more you heat, the more LW radiation go out.\n\n[TO BE POLISHED]\nKernel related: structural uncertainty in Planck feedback arises from differences in spatial pattern of surface warming and climatological distribution fo clodus and water vapor that determines planetary emissivity - affects radiative temperature kernel \n\nSherwood et al., 2020.\n\nTypes of radiative kernels there are: sfc albedo, air temp (vert.varying) , surf temp, LW water vapor kernel, SW water vapor kernel\n\nNote\n\nPlanck feedback not necessarily accurately represented in climate models due to lack of stratospheric warming \n\nCronin & Dutta, 2023.\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#id-1-planck-feedback-negative-under-warming","position":17},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"2. Surface Albedo Feedback (Positive under warming)","lvl2":"Radiative Feedback (\\lambda)"},"type":"lvl3","url":"/notebooks/foundations/energy-balance-model#id-2-surface-albedo-feedback-positive-under-warming","position":18},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"2. Surface Albedo Feedback (Positive under warming)","lvl2":"Radiative Feedback (\\lambda)"},"content":"\n\nThe surface albedo feedback, also known as the ice-albedo feedback, pertains primarily to the high latitudes, where snow and ice are present. Snow and ice have very high albedo (reflectivity). Snow has the highest albedo (up to 90%), while sea ice albedo ranges from 50-70%. Melt ponds further reduce the albedo, and as ice recedes, open ocean can be as low as 6%.\n\nThis process consitutes a positive feedback loop: melt of snow and ice decreases albedo, causing additional radiation absorption. More absorption causes temperatures to rise, which further contributes to melt, restarting the cycle.\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#id-2-surface-albedo-feedback-positive-under-warming","position":19},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"3. Water Vapor Feedback: (Positive under warming)","lvl2":"Radiative Feedback (\\lambda)"},"type":"lvl3","url":"/notebooks/foundations/energy-balance-model#id-3-water-vapor-feedback-positive-under-warming","position":20},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"3. Water Vapor Feedback: (Positive under warming)","lvl2":"Radiative Feedback (\\lambda)"},"content":"[UNDER CONSTRUCTION]\n\nWater vapor feedback and lapse rate feedback are commonly discussed together as they are both dependent on the how much water vapor is present in the atmosphere.\n\nWater vapor feedback is defined as the change in TOA net flux due to the increase in water vapor per degree of surface warming.\n\nWater vapor interacts with both longwave and shortwave radiation.  captures the change in outgoing LW and absorbed SW radiation at TOA due to the changes in the atmospheric water vapor concentration.\n\n[insert pic of capacity of jar increases as temperature increase]\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#id-3-water-vapor-feedback-positive-under-warming","position":21},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"4. Lapse Rate Feedback (Negative under warming)","lvl2":"Radiative Feedback (\\lambda)"},"type":"lvl3","url":"/notebooks/foundations/energy-balance-model#id-4-lapse-rate-feedback-negative-under-warming","position":22},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"4. Lapse Rate Feedback (Negative under warming)","lvl2":"Radiative Feedback (\\lambda)"},"content":"\n\nLATERRRRRR\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#id-4-lapse-rate-feedback-negative-under-warming","position":23},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"5. Cloud Feedback","lvl2":"Radiative Feedback (\\lambda)"},"type":"lvl3","url":"/notebooks/foundations/energy-balance-model#id-5-cloud-feedback","position":24},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"5. Cloud Feedback","lvl2":"Radiative Feedback (\\lambda)"},"content":"\n\nThe cloud feedback mechanism is the most complex feedback discussed in this tutorial. There are several reasons for this. Clouds interact with both shortwave (SW) solar radiation and longwave (LW) terrestrial radiation and exert varying radiative effects depending on their properties (cloud type, height, optical depth, liquid and ice water content, particule sizes, etc).\n\nGenerally, high-level clouds do not interact much with solar radiation but easily absorb terrestrial radiation, preventing its loss to space and contribute to warming. Low-level clouds reflect solar radiation during the day, which contributes to cooling, but absorb some terrestrial radiation,  contributing to warming (particularly at night!). Thus, high-level clouds tend to exert a positive climate feedback, while low-level clouds tend to exert an overall negative climate feedback.\n\n\n\n\nCredit: Paulo Ceppi\n\nCloud feedbacks produced by climate models tend to vary greatly, which is largely attributed to the issue of scale in modern GCMs (ESMs??). GCMs are at resolutions much too large to resolve the microscopic processes dictating the formation and properties of clouds.\nCloud formation and lifetime is additionally complex as it is highly dependent on atmospheric aerosol loading, which is another complex discussion. Of course, clouds are also intrinsically tied to atmospheric water vapor content.\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#id-5-cloud-feedback","position":25},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Methods to Calculate Raditaive Feedback"},"type":"lvl2","url":"/notebooks/foundations/energy-balance-model#methods-to-calculate-raditaive-feedback","position":26},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Methods to Calculate Raditaive Feedback"},"content":"\n\nTypically radiative feedback are calculated with global climate models. :O\n\nPRP method\n\nWorkin on it >:)\n\nSuccessWe got this done after all!\n\nWarningBe careful!\n\nDangerScary stuff be here.\n\nWe also suggest checking out Jupyter Book’s \n\nbrief demonstration on adding cell tags to your cells in Jupyter Notebook, Lab, or manually. Using these cell tags can allow you to \n\ncustomize how your code content is displayed and even \n\ndemonstrate errors without altogether crashing our loyal army of machines!\n\n\n\n","type":"content","url":"/notebooks/foundations/energy-balance-model#methods-to-calculate-raditaive-feedback","position":27},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/foundations/energy-balance-model#summary","position":28},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl2":"Summary"},"content":"Add one final --- marking the end of your body of content, and then conclude with a brief single paragraph summarizing at a high level the key pieces that were learned and how they tied to your objectives. Look to reiterate what the most important takeaways were.","type":"content","url":"/notebooks/foundations/energy-balance-model#summary","position":29},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"What’s next?","lvl2":"Summary"},"type":"lvl3","url":"/notebooks/foundations/energy-balance-model#whats-next","position":30},{"hierarchy":{"lvl1":"Energy Balance Model and Feedbacks","lvl3":"What’s next?","lvl2":"Summary"},"content":"Let Jupyter book tie this to the next (sequential) piece of content that people could move on to down below and in the sidebar. However, if this page uniquely enables your reader to tackle other nonsequential concepts throughout this book, or even external content, link to it here!\n\nReferences:\n\nBony et al. 2006\n\nZelinka et al. 2020\n\nSherwood et al. 2020\n\nDessler and Zelinka 2015 (Encyclopedia of Atmospheric Sciences)\n\nHartmann 2016 (Global Physical Climatology)\n\nHansen et al. 1984\n\nGregory et al. 2004\n\nMore to come","type":"content","url":"/notebooks/foundations/energy-balance-model#whats-next","position":31},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in this Project Pythia Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1},{"hierarchy":{"lvl1":"Feedbacks with ClimKern"},"type":"lvl1","url":"/notebooks/simplified-calc/climkern-calc","position":0},{"hierarchy":{"lvl1":"Feedbacks with ClimKern"},"content":"\n\n\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc","position":1},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Overview"},"type":"lvl2","url":"/notebooks/simplified-calc/climkern-calc#overview","position":2},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Overview"},"content":"While it is good to know how to manually calculate radiative feedbacks, it is also time-consuming to constantly recreate the code. Here, we will use a Python package called ClimKern \n\nJanoski et al., 2025 that offers functions to calculate radiative feedbacks from climate model or reanalysis output. The advantages of using ClimKern go beyond making it simpler—it standardizes the methods and assumptions that go into these sometimes complicated calculations. We will use CMIP6 output in this notebook. You will learn how to:\n\nDownload CMIP6 data from Pangeo’s space on Google Cloud.\n\nObtain a radiative kernel from the ClimKern repository.\n\nCalculate the surface albedo, temperature, and water vapor feedbacks.\n\nCompute the cloud feedbacks using the two main methods: residual and adjustment.\n\nQuantify stratospheric feedbacks.\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#overview","position":3},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/simplified-calc/climkern-calc#prerequisites","position":4},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nIntro to Xarray\n\nNecessary\n\n\n\nIntro to Cartopy\n\nNecessary\n\n\n\nIntro to Matplotlib\n\nHelpful\n\n\n\nLoading CMIP6 Data with Intake-ESM\n\nHelpful\n\n\n\nTime to learn: 20 minutes\n\n\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#prerequisites","position":5},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/simplified-calc/climkern-calc#imports","position":6},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Imports"},"content":"\n\nimport climkern as ck\nimport intake\nimport matplotlib.pyplot as plt\nimport s3fs\nimport fsspec\nimport xarray as xr\nimport glob\nimport importlib.util\nimport os\nimport cartopy.crs as ccrs\n\n%matplotlib inline\nplt.rcParams[\"figure.dpi\"] = 100\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#imports","position":7},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Download the kernel"},"type":"lvl2","url":"/notebooks/simplified-calc/climkern-calc#download-the-kernel","position":8},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Download the kernel"},"content":"\n\nNormally, when ClimKern is installed, the user needs to download data on the command\nline from the Zenodo repository. However, we now have the data on Jetstream2, so\nwe can download it from there and save it in our package repository.\n\nFuture updateFuture versions of ClimKern will be able to pull the kernel from Jetstream2 without storing locally.\n\nFirst, set the URL and path to point to ClimKern. Also, specify which kernel you want.\n\nURL = \"https://js2.jetstream-cloud.org:8001/\" # URL for jetstream access\npath = f\"pythia/ClimKern\" # Location of ClimKern\nkernel = \"ERA5\"\n\nNext, read in the data from Jetstream2\n\n# Read in data\n# Set up access to jetstream2\nfs = fsspec.filesystem(\"s3\", anon=True, client_kwargs=dict(endpoint_url=URL))\npattern = f\"s3://{path}/kernels/\"+kernel+f\"/TOA*.nc\"\n\n# Grab the data\nfiles = sorted(fs.glob(pattern))\nfs.invalidate_cache() # This is necessary to deal with peculiarities of objects served from jetstream2\n\n# Open file and make it Xarray Dataset\nkern = xr.open_dataset(fs.open(files[0]))\n\n# Save path for later\npath_out = files[0].split(kernel+\"/\",1)[1]\n\nTo save this data in ClimKern’s directory, we have to figure out where it is on the\nmachine. After that, we will go ahead and save out the kernel as a netCDF in\nClimKern’s local data directory.\n\n# Get the package location\nspec = importlib.util.find_spec(\"climkern\")\npackage_dir = os.path.dirname(spec.origin)\n\n# print(f\"The package directory is: {package_dir}\")\n\n# Define the path where you want to save the netCDF file within the package directory\nnetcdf_path = os.path.join(package_dir,\"data/kernels\",kernel,path_out)\n\n# Ensure the directory exists\nos.makedirs(os.path.dirname(netcdf_path), exist_ok=True)\n\n# Save the dataset as a netCDF file\nkern.to_netcdf(netcdf_path)\n\nNow, let’s just make sure we can retrieve the kernel.\n\nck.util.get_kern(kernel)\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#download-the-kernel","position":9},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Prepare the CMIP6 Data"},"type":"lvl2","url":"/notebooks/simplified-calc/climkern-calc#prepare-the-cmip6-data","position":10},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Prepare the CMIP6 Data"},"content":"\n\nTo start, we will need some CMIP6 data to calculate feedbacks. We will use the\npreindustrial control and 4×CO_2 experiments from just one model (CESM2).\n\n# Make a list of variables and experiments we need\nvar_list = [\"rsds\",\"rsus\",\"ta\",\"ts\",\"ps\",\"hus\"]\nexp_list = [\"piControl\",\"abrupt-4xCO2\"]\n\n# Specify data location, open it\ncat_url = \"https://storage.googleapis.com/cmip6/pangeo-cmip6.json\"\ncol = intake.open_esm_datastore(cat_url)\n\n# Create a catalog of matching simulations\ncat = col.search(experiment_id=exp_list,source_id=\"CESM2\",variable_id=var_list,\n                table_id=\"Amon\")\n\n# Convert to a dictionary of Xarray Datasets\nds_dict = cat.to_dataset_dict(zarr_kwargs={'consolidated': True})\n\nThe data, especially the preindustrial control simulation that will serve as our\ncontrol climate, is huge. We are going to only use the last 50 years of the control\nand last 30 years of the abrupt 4×CO_2 simulation. There are a few extra coordinates\nand/or dimensions we don’t need, hence the squeeze().\n\n# Our control simulation\nctrl = ds_dict[\"CMIP.NCAR.CESM2.piControl.Amon.gn\"].isel(\n    time=slice(-600,None)).squeeze().chunk({\"plev\":1,\"time\":-1})\n\n# The increase CO2 aka \"perturbed\" simulation\npert = ds_dict[\"CMIP.NCAR.CESM2.abrupt-4xCO2.Amon.gn\"].isel(\n    time=slice(-360,None)).squeeze().chunk({\"plev\":1,\"time\":-1})\n\nTo save a little diskspace because ClimKern still isn’t dask compatible yet,\nlet’s make our control climatology ahead of time.\n\nctrl = ctrl.groupby(ctrl.time.dt.month).mean(dim=\"time\").rename({\"month\":\"time\"})\npert = pert.groupby(pert.time.dt.month).mean(dim=\"time\").rename({\"month\":\"time\"})\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#prepare-the-cmip6-data","position":11},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Feedback calculations"},"type":"lvl2","url":"/notebooks/simplified-calc/climkern-calc#feedback-calculations","position":12},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl2":"Feedback calculations"},"content":"\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#feedback-calculations","position":13},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Calculate surface temperature change","lvl2":"Feedback calculations"},"type":"lvl3","url":"/notebooks/simplified-calc/climkern-calc#calculate-surface-temperature-change","position":14},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Calculate surface temperature change","lvl2":"Feedback calculations"},"content":"\n\nClimKern outputs feedbacks as radiative perturbations at the TOA (because there are multiple ways to quantify feedbacks). One of the most common ways is to normalize by the change in the surface temperature, which puts values in “true” feedback units of W/m^2/K. For that, we start by calculating the change in the surface temperature in our CESM2 experiment.\n\n# Take difference between pert and ctrl ts fields\nΔts = pert.ts - ctrl.ts\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#calculate-surface-temperature-change","position":15},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Surface albedo feedback","lvl2":"Feedback calculations"},"type":"lvl3","url":"/notebooks/simplified-calc/climkern-calc#surface-albedo-feedback","position":16},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Surface albedo feedback","lvl2":"Feedback calculations"},"content":"\n\nPerhaps the simplest of the radiative feedbacks to calculate is the surface albedo\nfeedback because it requires only two variables and is a 3-dimensional field (no height\ncoordinate). The variables we will use are as follows:\n\nVariable name\n\nDescription\n\nUnits\n\nrsus\n\nThe upwelling shortwave radiation at the surface\n\nW/m^2\n\nrsds\n\nThe downwelling shortwave radiation at the surface\n\nW/m^2\n\nThe \n\ncalc_alb_feedback() function is straightforward. Be sure to include our kernel name\nin the arguments.\n\nalb = ck.calc_alb_feedback(\n    ctrl.rsus,ctrl.rsds,pert.rsus,pert.rsds,kern=\"ERA5\"\n)\n\nLet’s see what the resulting Dataarray looks like.\n\nalb\n\nFinally, let’s plot the time average surface albedo feedback on a map, first as just the perturbation.\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot surface albedo feedback & add coastlines\nalb.mean(dim=\"time\").plot(ax=ax,transform=ccrs.PlateCarree(),\n                         cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                                      \"label\":\"W/m$^2$\"})\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged Surface Albedo Feedback\")\n\nplt.show()\n\nNow normalized by the surface temperature change...\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot surface albedo feedback & add coastlines\n(alb.mean(dim=\"time\")/Δts.mean(dim=\"time\")).plot(ax=ax,transform=ccrs.PlateCarree(),\n                         cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                                      \"label\":\"W/m$^2$/K\"})\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged Surface Albedo Feedback\")\n\nplt.show()\n\nAs one might expect, the greatest radiative change at the TOA from the surface albedo feedback is near the poles where there is melting sea ice and snow.\n\nLet’s end by calculating the global average. ClimKern comes with a \n\nspat_avg() function.\n\n# Output the time-averaged global surface albedo feedback\noutput = \"The global average surface albedo feedback is {value:.2f} W/m\\u00b2/K.\"\nprint(output.format(value=float(ck.spat_avg((alb.mean(dim=\"time\")/Δts.mean(dim=\"time\")\n                                         ).expand_dims(\"time\")))))\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#surface-albedo-feedback","position":17},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Planck and lapse rate feedbacks","lvl2":"Feedback calculations"},"type":"lvl3","url":"/notebooks/simplified-calc/climkern-calc#planck-and-lapse-rate-feedbacks","position":18},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Planck and lapse rate feedbacks","lvl2":"Feedback calculations"},"content":"\n\nAs a reminder, the total tropospheric temperature feedback is often decomposed into a distict Planck and lapse rate feedback. ClimKern has a single function that produces both feedbacks simultaneously called \n\ncalc_T_feedbacks(). The variables we need this time are:\n\nVariable name\n\nDescription\n\nUnits\n\nNotes\n\nta\n\nThe 4-dimensional air temperature\n\nK\n\n\n\nts\n\nThe 3-dimensional surface skin temperature\n\nK\n\n\n\nps\n\nThe 3-dimensional surface pressure\n\nPa, mb, or hPa\n\n\n\ntrop_p\n\nThe 3-dimensional tropopause height\n\nPa, mb, or hPa\n\nOptional\n\nCMIP6 output rarely contains the tropopause height, so we will create a default tropopause that decreases linearly with the cosine of latitude from 100 hPa at the Equator to 300 hPa at the poles.\n\n# Use ClimKern's \"hidden\" make_tropo function\npert[\"trop_p\"] = ck.util.make_tropo(pert.ps)\npert.trop_p.attrs[\"units\"] = \"Pa\"\n\nlr,pl = ck.calc_T_feedbacks(\n    ctrl.ta,ctrl.ts,ctrl.ps,pert.ta,pert.ts,pert.ps,pert_trop=pert.trop_p,kern=\"ERA5\"\n)\n\nSimple. Let’s see what it looks like.\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot surface albedo feedback & add coastlines\nlr.mean(dim=\"time\").plot(ax=ax,transform=ccrs.PlateCarree(),\n                         cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                                      \"label\":\"W/m$^2$\"})\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged Lapse Rate Feedback\")\n\nplt.show()\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot surface albedo feedback & add coastlines\n(lr.mean(dim=\"time\")/Δts.mean(dim=\"time\")).plot(ax=ax,transform=ccrs.PlateCarree(),\n                         cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                                      \"label\":\"W/m$^2$/K\"})\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged Lapse Rate Feedback\")\n\nplt.show()\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot surface albedo feedback & add coastlines\npl.mean(dim=\"time\").plot(ax=ax,transform=ccrs.PlateCarree(),cmap=\"Blues_r\",\n                         cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                                      \"label\":\"W/m$^2$\"})\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged Planck Feedback\")\n\nplt.show()\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot surface albedo feedback & add coastlines\n(pl.mean(dim=\"time\")/Δts.mean(dim=\"time\")).plot(\n    ax=ax,transform=ccrs.PlateCarree(),cmap=\"Blues_r\",\n    cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\"label\":\"W/m$^2$\"}\n)\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged Planck Feedback\")\n\nplt.show()\n\nThese results seem reasonable. The Planck feedback is often the feedback with the largest magnitude and scales nonlinearly with temperature change. The lapse rate feedback changes sign depending on the vertical structure of the atmosphere is usually positive (warming) at the poles and negative (cooling) in the tropics.\n\nLet’s get those global averages again!\n\n# Output the time-averaged global temperature feedbacks\noutput = (\"The global average lapse rate and Planck feedbacks are\"+\n          \" {lr:.2f} and {pl:.2f} W/m\\u00b2/K, respectively.\")\nprint(output.format(lr=float(ck.spat_avg((lr.mean(dim=\"time\")/Δts.mean(dim=\"time\")\n                                         ).expand_dims(\"time\"))),\n                   pl=float(ck.spat_avg((pl.mean(dim=\"time\")/Δts.mean(dim=\"time\")\n                                        ).expand_dims(\"time\")))))\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#planck-and-lapse-rate-feedbacks","position":19},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Water vapor feedbacks","lvl2":"Feedback calculations"},"type":"lvl3","url":"/notebooks/simplified-calc/climkern-calc#water-vapor-feedbacks","position":20},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Water vapor feedbacks","lvl2":"Feedback calculations"},"content":"\n\nHere we use ClimKern to calculate the longwave and shortwave water vapor feedabcks. ClimKern has a single function that produces both called \n\ncalc_q_feedbacks(). This function requires both the specific humidity and air temperature because ClimKern has to normalize the water vapor kernels to make them compatible with the specific humidity.\n\nVariable name\n\nDescription\n\nUnits\n\nNotes\n\nhus\n\nThe 4-dimensional specific humidity\n\n\\frac{g}{g} or \\frac{g}{kg}\n\n\n\nta\n\nThe 4-dimensional air temperature\n\nK\n\n\n\nps\n\nThe 3-dimensional surface pressure\n\nPa, mb, or hPa\n\n\n\ntrop_p\n\nThe 3-dimensional tropopause height\n\nPa, mb, or hPa\n\nOptional\n\nThere is one more argument we can provide called method, which is simply a number 1-4. This corresponds to whether to use a fractional approximation for logarithms, use the logarithms explicitly, or use the linear change in water vapor concentration. See \n\nhere for complete descriptions. We will use method 3 which is to use the natural logarithm of specific humidity without doing a fractional approximation.\n\nWe will use the same tropopause height as before.\n\n# Use ClimKern's water vapor feedback function\nqlw,qsw = ck.calc_q_feedbacks(\n    ctrl.hus,ctrl.ta,ctrl.ps,pert.hus,pert.ps,pert_trop=pert.trop_p,kern=\"ERA5\",\n    method=3\n)\n\nLet’s take a look, starting with the longwave.\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot the longwave water vapor feedback and add coastlines\nqlw.mean(dim=\"time\").plot(ax=ax,transform=ccrs.PlateCarree(),cmap=\"Reds\",\n                         cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                                      \"label\":\"W/m$^2$\"})\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged LW Water Vapor Feedback\")\n\nplt.show()\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot the longwave water vapor feedback and add coastlines\n(qlw.mean(dim=\"time\")/Δts.mean(dim=\"time\")).plot(\n    ax=ax,transform=ccrs.PlateCarree(),cmap=\"Reds\",\n    cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                 \"label\":\"W/m$^2$/K\"}\n)\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged LW Water Vapor Feedback\")\n\nplt.show()\n\nAnd now the shortwave...\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot the longwave water vapor feedback and add coastlines\nqsw.mean(dim=\"time\").plot(ax=ax,transform=ccrs.PlateCarree(),cmap=\"Reds\",\n                         cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                                      \"label\":\"W/m$^2$\"})\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged SW Water Vapor Feedback\")\n\nplt.show()\n\n# Set a few variables\nproj = ccrs.Robinson()\n\n# Create figure and axis\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj),\n                       layout=\"constrained\")\n\n# Plot the longwave water vapor feedback and add coastlines\n(qsw.mean(dim=\"time\")/Δts.mean(dim=\"time\")).plot(\n    ax=ax,transform=ccrs.PlateCarree(),cmap=\"Reds\",\n                         cbar_kwargs={\"orientation\": \"horizontal\", \"shrink\": 0.7,\n                                      \"label\":\"W/m$^2$/K\"}\n)\nax.coastlines()\n\n# Add a title\nax.set_title(\"Time-averaged SW Water Vapor Feedback\")\n\nplt.show()\n\n# Output the time-averaged global surface albedo feedback\noutput = (\"The global average longwave and shortwave water vapor feedbacks are\"+\n          \" {lw:.2f} and {sw:.2f} W/m\\u00b2/K, respectively.\")\nprint(output.format(lw=float(ck.spat_avg((qlw.mean(dim=\"time\")/Δts.mean(dim=\"time\")\n                                         ).expand_dims(\"time\"))),\n                   sw=float(ck.spat_avg((qsw.mean(dim=\"time\")/Δts.mean(dim=\"time\")\n                                        ).expand_dims(\"time\")))))\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#water-vapor-feedbacks","position":21},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Cloud feedbacks","lvl2":"Feedback calculations"},"type":"lvl3","url":"/notebooks/simplified-calc/climkern-calc#cloud-feedbacks","position":22},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl3":"Cloud feedbacks","lvl2":"Feedback calculations"},"content":"\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#cloud-feedbacks","position":23},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl4":"Download radiative forcing","lvl3":"Cloud feedbacks","lvl2":"Feedback calculations"},"type":"lvl4","url":"/notebooks/simplified-calc/climkern-calc#download-radiative-forcing","position":24},{"hierarchy":{"lvl1":"Feedbacks with ClimKern","lvl4":"Download radiative forcing","lvl3":"Cloud feedbacks","lvl2":"Feedback calculations"},"content":"\n\nIt’s time for cloud feedbacks. However, like anything to do with clouds, there are some complications. You ideally need the effective radiative forcing (ERF), which is a measure of radiative imbalance imposed by CO_2 in the absence of surface temperature change \n\nSmith et al., 2020. Thankfully, CESM2 radiative forcing for our scenarios is available on the Google cloud.\n\n# Specify data location, open it\ncat_url = \"https://storage.googleapis.com/cmip6/pangeo-cmip6.json\"\ncol = intake.open_esm_datastore(cat_url)\n\n# # Create a catalog of matching simulations\ncat = col.search(activity_id=\"RFMIP\",source_id=\"CESM2\",experiment_id=[\"piClim-4xCO2\",\n                                                                      \"piClim-control\"],\n                variable_id=[\"rlut\",\"rsut\",\"rsdt\"])\n\n# Convert to a dictionary of Xarray Datasets\nds_dict = cat.to_dataset_dict(zarr_kwargs={'consolidated': True})\n\n# Assign Datasets to variables\nrf_ctrl = ds_dict[\"RFMIP.NCAR.CESM2.piClim-control.Amon.gn\"]\nrf_pert = ds_dict[\"RFMIP.NCAR.CESM2.piClim-4xCO2.Amon.gn\"]\n\nInfoYour relevant information here!\n\nFeel free to copy this around and edit or play around with yourself. Some other admonitions you can put in:\n\nSuccessWe got this done after all!\n\nWarningBe careful!\n\nDangerScary stuff be here.\n\nWe also suggest checking out Jupyter Book’s \n\nbrief demonstration on adding cell tags to your cells in Jupyter Notebook, Lab, or manually. Using these cell tags can allow you to \n\ncustomize how your code content is displayed and even \n\ndemonstrate errors without altogether crashing our loyal army of machines!\n\n","type":"content","url":"/notebooks/simplified-calc/climkern-calc#download-radiative-forcing","position":25}]}